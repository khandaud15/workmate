'use client';

import { useState, useEffect, useRef } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import DashboardLayout from '../../components/DashboardLayout';
import TestAPI from './test-api';
import { FaSpinner, FaDownload, FaCopy, FaRedo, FaFileAlt, FaChevronDown } from 'react-icons/fa';
import './cover-letter-styles.css';
import { initializeVercelEnvironment } from './vercel-fix';

// Resume interface
interface Resume {
  id: string;
  name: string;
  storageName: string;
  createdAt: string;
  updatedAt: string;
  url: string;
  isTargeted?: boolean;
  parsedResumeId: string | null;
}

export default function CoverLetterPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [jobDescription, setJobDescription] = useState('');
  const [companyName, setCompanyName] = useState('');
  const [position, setPosition] = useState('');
  const [coverLetter, setCoverLetter] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState('');
  const [isClient, setIsClient] = useState(false);
  const [showOutput, setShowOutput] = useState(false);
  const [isAIGenerated, setIsAIGenerated] = useState(true); // Track if AI or fallback was used
  const [resumes, setResumes] = useState<Resume[]>([]);
  const [selectedResumeId, setSelectedResumeId] = useState<string>('');
  const [isLoadingResumes, setIsLoadingResumes] = useState(false);
  const [resumeContent, setResumeContent] = useState<string>('');
  const [resumeOwnerName, setResumeOwnerName] = useState<string>('');

  // This ensures we're only rendering on the client side
  useEffect(() => {
    setIsClient(true);
    // Initialize Vercel environment fixes
    initializeVercelEnvironment();
  }, []);

  // Handle authentication redirects in useEffect to avoid hydration issues
  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin');
    }
  }, [status, router]);
  
  // Fetch resumes when the component mounts
  useEffect(() => {
    if (status === 'authenticated') {
      fetchResumes();
    }
  }, [status]);
  
  // Function to fetch resumes from the API
  const fetchResumes = async () => {
    try {
      setIsLoadingResumes(true);
      const res = await fetch(`/api/resume/list?t=${Date.now()}`);
      const data = await res.json();
      
      if (data.resumes && Array.isArray(data.resumes)) {
        console.log('[COVER-LETTER] Raw resumes from API:', data.resumes);
        
        // Show all resumes, even if they don't have a parsed ID
        const formattedResumes = data.resumes
          // Log instead of filtering out resumes without parsed IDs
          .map((r: any) => {
            if (!r.parsedResumeId) {
              console.log('[COVER-LETTER] Resume without parsed ID will use storage name instead:', r);
            }
            return r;
          })
          .map((r: any) => ({
            id: r.storageName, // Keep original ID for storage operations
            name: r.name,
            storageName: r.storageName,
            createdAt: r.createdAt,
            updatedAt: r.updatedAt,
            isTargeted: r.isTargeted === true,
            url: r.url,
            parsedResumeId: r.parsedResumeId, // Firestore ID for parsed resume
          }));
        
        setResumes(formattedResumes);
        
        // If there are resumes, select the first one by default
        if (formattedResumes.length > 0) {
          const firstResume = formattedResumes[0];
          console.log('[COVER-LETTER] Setting initial resume:', {
            id: firstResume.id,
            parsedResumeId: firstResume.parsedResumeId,
            name: firstResume.name
          });
          // Use parsedResumeId if available, otherwise fall back to storage name
          setSelectedResumeId(firstResume.parsedResumeId || firstResume.storageName || firstResume.id || '');
          console.log('[COVER-LETTER] Selected resume ID:', firstResume.parsedResumeId || firstResume.storageName || firstResume.id || '');
          fetchResumeContent(firstResume.url, firstResume);
        }
      }
    } catch (error) {
      console.error('Error fetching resumes:', error);
      setError('Failed to load resumes');
    } finally {
      setIsLoadingResumes(false);
    }
  };
  
  // Function to fetch resume content directly from the URL
  const fetchResumeContent = async (resumeUrl: string, resumeObj?: any) => {
    try {
      // Use the provided resume object or find it in the resumes array
      const selectedResume = resumeObj || resumes.find(r => r.url === resumeUrl);
      if (!selectedResume) {
        console.error('Selected resume not found');
        setResumeContent('Error: Selected resume not found. Please try again.');
        return "Candidate";
      }
      
      console.log('Selected resume:', selectedResume.name);
      setResumeContent('Fetching resume data...');
      
      // Extract the resume owner's name
      let ownerName = "";
      if (selectedResume.name) {
        // Get the first name from the resume name
        ownerName = selectedResume.name.split(' ')[0];
        console.log('Using name from resume:', ownerName);
      } else {
        ownerName = "Candidate";
      }
      
      // Set the resume owner name for use in the cover letter
      setResumeOwnerName(ownerName);
      
      // For simplicity, we'll use the resume URL directly
      // This is the URL to the actual resume file (PDF or other format)
      // The GPT API will use this information along with the job description
      const resumeInfo = `
      RESUME INFORMATION:
      Name: ${selectedResume.name}
      Resume ID: ${selectedResume.id}
      
      IMPORTANT: This resume belongs to ${ownerName}. Generate a professional cover letter
      that highlights relevant skills and experiences for the position. Focus on creating
      a personalized cover letter that connects the candidate's background to the job requirements.
      `;
      
      setResumeContent(resumeInfo);
      console.log('Resume info prepared for cover letter generation');
      return ownerName;
    } catch (error) {
      console.error('Error in fetchResumeContent:', error);
      setResumeContent('Failed to fetch resume data. Please try again.');
      return "Candidate";
    }
  };

  // Handle resume selection change
  const handleResumeChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const resumeId = e.target.value;
    setSelectedResumeId(resumeId);
    
    // Find the selected resume and fetch its content
    const selectedResume = resumes.find(resume => resume.id === resumeId);
    if (selectedResume) {
      // Pass both URL and resume object to fetchResumeContent
      fetchResumeContent(selectedResume.url, selectedResume);
      
      // Clear existing cover letter when changing resumes
      setCoverLetter('');
      setIsAIGenerated(false);
    }
  };

  // Show loading state during authentication check or before client-side hydration
  if (!isClient || status === 'loading') {
    return <div className="flex items-center justify-center min-h-screen bg-[#0a192f]">Loading...</div>;
  }

  // Don't render anything if not authenticated (redirect will happen)
  if (status === 'unauthenticated') {
    return null;
  }

  // Function to generate a cover letter
  const generateCoverLetter = async () => {
    if (!isClient) return;
    
    // Validate inputs
    if (!jobDescription.trim()) {
      setError('Please enter a job description.');
      return;
    }
    
    if (!selectedResumeId) {
      setError('Please select a resume.');
      return;
    }
    
    if (!companyName.trim()) {
      setError('Please enter a company name.');
      return;
    }
    
    if (!position.trim()) {
      setError('Please enter a position.');
      return;
    }
    
    setIsGenerating(true);
    setError('');
    setShowOutput(true);
    
    // Set a timeout to prevent indefinite loading
    const timeoutId = setTimeout(() => {
      if (isGenerating) {
        setIsGenerating(false);
        setError('Cover letter generation timed out. Please try again.');
      }
    }, 30000); // 30 second timeout
    
    try {
      // Find the selected resume
      const selectedResume = resumes.find(r => 
        (r.parsedResumeId === selectedResumeId) || 
        (r.storageName === selectedResumeId) || 
        (r.id === selectedResumeId)
      );
      
      console.log('[COVER-LETTER] Generating cover letter:', {
        selectedResumeId,
        selectedResume,
        allResumes: resumes.map(r => ({ 
          id: r.id, 
          parsedId: r.parsedResumeId, 
          storageName: r.storageName,
          name: r.name 
        }))
      });
      
      // Call the cover letter generation API
      const response = await fetch('/api/cover-letter/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jobDescription,
          position,
          companyName,
          resumeId: selectedResumeId,
        }),
      });
      
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.error || 'Failed to generate cover letter');
      }
      
      if (data.coverLetter) {
        setCoverLetter(data.coverLetter);
        setIsAIGenerated(true); // Mark as AI-generated
        console.log('Cover letter generated successfully');
      } else {
        throw new Error('No cover letter returned from API');
      }
    } catch (err: any) {
      console.error('Error generating cover letter:', err);
      setError(`Failed to generate cover letter: ${err.message || 'Unknown error'}`);
      setCoverLetter('');
      setIsAIGenerated(false);
    } finally {
      clearTimeout(timeoutId);
      setIsGenerating(false);
    }
  };
  
  // No template helper functions needed anymore

  const handleCopy = () => {
    navigator.clipboard.writeText(coverLetter);
  };

  const handleDownload = () => {
    const element = document.createElement('a');
    const file = new Blob([coverLetter], {type: 'text/plain'});
    element.href = URL.createObjectURL(file);
    element.download = `Cover_Letter_${companyName}_${position}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
  };

  // Resume selector dropdown component
  const ResumeSelector = () => {
    const [dropdownOpen, setDropdownOpen] = useState(false);
    const dropdownRef = useRef<HTMLDivElement>(null);
    
    // Close dropdown on outside click
    useEffect(() => {
      function handleClickOutside(e: MouseEvent) {
        if (dropdownRef.current && !dropdownRef.current.contains(e.target as Node)) {
          setDropdownOpen(false);
        }
      }
      
      if (dropdownOpen) {
        document.addEventListener('mousedown', handleClickOutside);
      }
      return () => document.removeEventListener('mousedown', handleClickOutside);
    }, [dropdownOpen]);
    
    // Find the currently selected resume
    const selectedResume = resumes.find(r => r.id === selectedResumeId);
    
    return (
      <div className="mb-6">
        <div 
          ref={dropdownRef}
          className="relative inline-flex items-center justify-between border border-[#1e2d3d] rounded-lg bg-[#0d1b2a] px-3 py-1.5 shadow-md w-full md:w-auto max-w-xs min-w-[200px] cursor-pointer"
          onClick={() => setDropdownOpen(!dropdownOpen)}
        >
          <span className="truncate text-white font-medium text-sm max-w-[180px]">
            {isLoadingResumes ? (
              <span className="inline-block bg-gray-700 rounded w-20 h-4 animate-pulse" />
            ) : (
              selectedResume?.name || 'Select a resume'
            )}
          </span>
          <span className="text-white ml-3 flex items-center">
            <FaChevronDown size={16} />
          </span>
          
          {dropdownOpen && (
            <div className="absolute left-0 top-full mt-1 bg-[#0d1b2a] border border-[#1e2d3d] rounded-lg shadow-lg w-full z-50 overflow-hidden">
              {resumes.length === 0 ? (
                <div className="px-4 py-2 text-gray-400 text-sm">No resumes found</div>
              ) : (
                resumes.map((resume) => (
                  <button
                    key={resume.id}
                    className={`block w-full text-left px-4 py-2 text-sm truncate hover:bg-[#1e2d3d] ${(resume.parsedResumeId || resume.storageName) === selectedResumeId ? 'bg-[#1e2d3d] text-white font-semibold' : 'text-gray-200'}`}
                    onClick={(e) => {
                      e.stopPropagation();
                      // Use parsedResumeId if available, otherwise fall back to storage name
                      const resumeId = resume.parsedResumeId || resume.storageName || resume.id;
                      console.log('[COVER-LETTER] Selected resume from dropdown:', {
                        parsedResumeId: resume.parsedResumeId,
                        storageName: resume.storageName,
                        id: resume.id,
                        selectedId: resumeId
                      });
                      
                      setSelectedResumeId(resumeId);
                      fetchResumeContent(resume.url, resume);
                      // Clear existing cover letter when changing resumes
                      setCoverLetter('');
                      setIsAIGenerated(false);
                      setDropdownOpen(false);
                    }}
                  >
                    <span className="truncate block w-full">{resume.name}</span>
                  </button>
                ))
              )}
            </div>
          )}
    );
    
    console.log('[COVER-LETTER] Generating cover letter:', {
      selectedResumeId,
      selectedResume,
      allResumes: resumes.map(r => ({ 
        id: r.id, 
        parsedId: r.parsedResumeId, 
        storageName: r.storageName,
        name: r.name 
      }))
    });
    
    // Call the cover letter generation API
    const response = await fetch('/api/cover-letter/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        jobDescription,
        position,
        companyName,
        resumeId: selectedResumeId,
      }),
    });
    
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.error || 'Failed to generate cover letter');
    }
    
    if (data.coverLetter) {
      setCoverLetter(data.coverLetter);
      setIsAIGenerated(true); // Mark as AI-generated
      console.log('Cover letter generated successfully');
    } else {
      throw new Error('No cover letter returned from API');
    }
  } catch (err: any) {
    console.error('Error generating cover letter:', err);
    setError(`Failed to generate cover letter: ${err.message || 'Unknown error'}`);
    setCoverLetter('');
    setIsAIGenerated(false);
  } finally {
    clearTimeout(timeoutId);
    setIsGenerating(false);
  }
};

// No template helper functions needed anymore

const handleCopy = () => {
  navigator.clipboard.writeText(coverLetter);
};

const handleDownload = () => {
  const element = document.createElement('a');
  const file = new Blob([coverLetter], {type: 'text/plain'});
  element.href = URL.createObjectURL(file);
  element.download = `Cover_Letter_${companyName}_${position}.txt`;
  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
};

// Resume selector dropdown component
const ResumeSelector = () => {
  const [dropdownOpen, setDropdownOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);
  
  // Close dropdown on outside click
  useEffect(() => {
    function handleClickOutside(e: MouseEvent) {
      if (dropdownRef.current && !dropdownRef.current.contains(e.target as Node)) {
        setDropdownOpen(false);
      }
    }
    
    if (dropdownOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [dropdownOpen]);
  
  // Find the currently selected resume
  const selectedResume = resumes.find(r => r.id === selectedResumeId);
  
  return (
    <div className="mb-6">
      <div 
        ref={dropdownRef}
        className="relative inline-flex items-center justify-between border border-[#1e2d3d] rounded-lg bg-[#0d1b2a] px-3 py-1.5 shadow-md w-full md:w-auto max-w-xs min-w-[200px] cursor-pointer"
        onClick={() => setDropdownOpen(!dropdownOpen)}
      >
        <span className="truncate text-white font-medium text-sm max-w-[180px]">
          {isLoadingResumes ? (
            <span className="inline-block bg-gray-700 rounded w-20 h-4 animate-pulse" />
          ) : (
            selectedResume?.name || 'Select a resume'
          )}
        </span>
        <span className="text-white ml-3 flex items-center">
          <FaChevronDown size={16} />
        </span>
        
        {dropdownOpen && (
          <div className="absolute left-0 top-full mt-1 bg-[#0d1b2a] border border-[#1e2d3d] rounded-lg shadow-lg w-full z-50 overflow-hidden">
            {resumes.length === 0 ? (
              <div className="px-4 py-2 text-gray-400 text-sm">No resumes found</div>
            ) : (
              resumes.map((resume) => (
                <button
                  key={resume.id}
                  className={`block w-full text-left px-4 py-2 text-sm truncate hover:bg-[#1e2d3d] ${(resume.parsedResumeId || resume.storageName) === selectedResumeId ? 'bg-[#1e2d3d] text-white font-semibold' : 'text-gray-200'}`}
                  onClick={(e) => {
                    e.stopPropagation();
                    // Use parsedResumeId if available, otherwise fall back to storage name
                    const resumeId = resume.parsedResumeId || resume.storageName || resume.id;
                    console.log('[COVER-LETTER] Selected resume from dropdown:', {
                      parsedResumeId: resume.parsedResumeId,
                      storageName: resume.storageName,
                      id: resume.id,
                      selectedId: resumeId
                    });
                    
                    setSelectedResumeId(resumeId);
                    fetchResumeContent(resume.url, resume);
                    // Clear existing cover letter when changing resumes
                    setCoverLetter('');
                    setIsAIGenerated(false);
                    setDropdownOpen(false);
                  }}
                >
                  <span className="truncate block w-full">{resume.name}</span>
                </button>
              ))
            )}
          </div>
        )}
      </div>
    </div>
  );
};

return (
  <DashboardLayout>
    <div className="p-4 md:p-8 max-w-5xl mx-auto">
      {/* API Test Component for debugging */}
      <div className="mb-8 p-4 border border-gray-300 rounded-lg">
        <h3 className="text-lg font-semibold mb-2">API Testing Tool</h3>
        <TestAPI />
      </div>
      <div className="w-full px-4 py-8 md:max-w-7xl md:mx-auto cover-letter-page" id="cover-letter-page">
        <h1 className="text-xl font-bold text-white mb-8 cover-letter-title">Talexus Cover Letter Generator</h1>
        <ResumeSelector />
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Form */}
          <div className="bg-[#0d1b2a] rounded-lg p-6 shadow-lg border border-gray-700">
            <h2 className="text-xl font-semibold text-white mb-4">Job Details</h2>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-300 mb-1">Company Name</label>
              <input
                type="text"
                value={companyName}
                onChange={(e) => setCompanyName(e.target.value)}
                className="bg-[#0d1b2a] border border-[#1e2d3d] rounded-md px-3 sm:px-4 py-3 text-gray-100 text-base focus:outline-none focus:border-[#2563eb] transition shadow-inner w-full"
                placeholder="Enter company name"
              />
            </div>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-300 mb-1">Position</label>
              <input
                type="text"
                value={position}
                onChange={(e) => setPosition(e.target.value)}
                className="bg-[#0d1b2a] border border-[#1e2d3d] rounded-md px-3 sm:px-4 py-3 text-gray-100 text-base focus:outline-none focus:border-[#2563eb] transition shadow-inner w-full"
                placeholder="Enter job position"
              />
            </div>
            
            <div className="mb-6">
              <label className="block text-sm font-medium text-gray-300 mb-1">Job Description</label>
              <textarea
                value={jobDescription}
                onChange={(e) => setJobDescription(e.target.value)}
                className="bg-[#0d1b2a] border border-[#1e2d3d] rounded-md px-3 sm:px-4 py-3 text-gray-100 text-base focus:outline-none focus:border-[#2563eb] transition shadow-inner w-full h-40"
                placeholder="Paste job description here"
              />
            </div>
            
            {error && <p className="text-red-500 mb-4">{error}</p>}
            
            <button
              onClick={generateCoverLetter}
              disabled={isGenerating}
              className="w-full bg-[#2563eb] hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition duration-300 flex items-center justify-center"
            >
              {isGenerating ? (
                <>
                  <FaSpinner className="animate-spin mr-2" />
                  Generating...
                </>
              ) : (
                'Generate Cover Letter'
              )}
            </button>
          </div>
          
          {/* Output - Hidden on mobile until generate button is clicked */}
          <div className={`bg-[#0d1b2a] rounded-lg p-6 shadow-lg border border-gray-700 cover-letter-output ${!showOutput ? 'hidden lg:block' : 'block'}`}>
            <div className="flex justify-between items-center mb-4">
              <div className="flex items-center">
                <h2 className="text-xl font-semibold text-white">Your Cover Letter</h2>
                {coverLetter && (
                  <span className={`ml-3 text-xs px-2 py-1 rounded ${isAIGenerated ? 'bg-green-900 text-green-200' : 'bg-yellow-900 text-yellow-200'}`}>
                    {isAIGenerated ? 'AI Generated' : 'Template Fallback'}
                  </span>
                )}
              </div>
              {coverLetter && (
                <div className="flex space-x-2">
                  <button
                    onClick={handleCopy}
                    className="bg-[#1e293b] hover:bg-gray-700 text-white p-2 rounded-md transition duration-300"
                    title="Copy to clipboard"
                  >
                    <FaCopy />
                  </button>
                  <button
                    onClick={handleDownload}
                    className="bg-[#1e293b] hover:bg-gray-700 text-white p-2 rounded-md transition duration-300"
                    title="Download as text file"
                  >
                    <FaDownload />
                  </button>
                  <button
                    onClick={generateCoverLetter}
                    className="bg-[#1e293b] hover:bg-gray-700 text-white p-2 rounded-md transition duration-300"
                    title="Regenerate"
                    disabled={isGenerating}
                  >
                    {isGenerating ? <FaSpinner className="animate-spin" /> : <FaRedo />}
                  </button>
                </div>
              )}
            </div>
            
            {coverLetter ? (
              <div className="bg-[#1e293b] border border-gray-700 rounded-md p-4 h-[500px] overflow-y-auto whitespace-pre-wrap text-gray-200">
                {coverLetter}
              </div>
            ) : (
              <div className="bg-[#1e293b] border border-gray-700 rounded-md p-4 h-[500px] flex items-center justify-center text-gray-400">
                Your generated cover letter will appear here
              </div>
            )}
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
}
