'use client';

import React, { useEffect, useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { CheckIcon } from '@heroicons/react/24/solid';
import { ArrowLeftIcon } from '@heroicons/react/24/outline';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

type ContactInfo = {
  firstName: string;
  lastName: string;
  dateOfBirth: string;
  address: string;
  city: string;
  postalCode: string;
  state: string;
  linkedIn: string;
  phone: string;
  email: string;
  smsOptIn: boolean;
};

type ValidationState = {
  [K in keyof ContactInfo]: boolean;
};

export default function ContactInfoForm() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(true);

  // Load resume data on mount
  useEffect(() => {
    const savedData = localStorage.getItem('resumeData');
    if (savedData) {
      const resumeData = JSON.parse(savedData);
      setFormData(prevData => ({
        ...prevData,
        firstName: resumeData.name?.first || '',
        lastName: resumeData.name?.last || '',
        email: resumeData.email || '',
        phone: resumeData.phone || '',
      }));
    }
    setIsLoading(false);
  }, []);

  const [formData, setFormData] = useState<ContactInfo>({
    firstName: '',
    lastName: '',
    dateOfBirth: '',
    address: '',
    city: '',
    postalCode: '',
    state: '',
    linkedIn: '',
    phone: '',
    email: '',
    smsOptIn: false,
  });

  const [touched, setTouched] = useState<Record<keyof ContactInfo, boolean>>({
    firstName: false,
    lastName: false,
    dateOfBirth: false,
    address: false,
    city: false,
    postalCode: false,
    state: false,
    linkedIn: false,
    phone: false,
    email: false,
    smsOptIn: false,
  });

  const [validation, setValidation] = useState<ValidationState>({
    firstName: false,
    lastName: false,
    dateOfBirth: false,
    address: false,
    city: false,
    postalCode: false,
    state: false,
    linkedIn: false,
    phone: false,
    email: false,
    smsOptIn: true,
  });

  useEffect(() => {
    const fetchResumeData = async () => {
      const identifier = localStorage.getItem('resumeIdentifier');
      if (!identifier) {
        console.error('No resume identifier found');
        return;
      }

      try {
        const response = await fetch(`/api/resume/scan?identifier=${identifier}`);
        if (!response.ok) {
          throw new Error('Failed to fetch resume data');
        }

        const data = await response.json();
        if (data.data) {
          // Extract name parts
          let firstName = '', lastName = '';
          if (typeof data.data.name === 'object') {
            firstName = data.data.name.first || '';
            lastName = data.data.name.last || '';
          } else if (typeof data.data.name === 'string') {
            const parts = data.data.name.split(' ');
            firstName = parts[0] || '';
            lastName = parts.slice(1).join(' ') || '';
          }

          // Get location data
          let location = null;
          if (data.data.location) {
            location = data.data.location;
          } else if (data.data.addresses && data.data.addresses.length > 0) {
            location = data.data.addresses[0];
          } else if (data.data.address) {
            location = data.data.address;
          }

          // Extract phone number - try multiple possible fields
          let phone = '';
          if (data.data.phone) {
            phone = data.data.phone;
          } else if (data.data.phoneNumbers && data.data.phoneNumbers.length > 0) {
            phone = data.data.phoneNumbers[0];
          } else if (data.data.phones && data.data.phones.length > 0) {
            phone = typeof data.data.phones[0] === 'string' ? 
              data.data.phones[0] : 
              data.data.phones[0].number || data.data.phones[0].phone || '';
          } else if (data.data.contactPoints) {
            const phonePoint = data.data.contactPoints.find((point: any) => 
              point.type === 'phone' || point.type === 'mobile'
            );
            if (phonePoint) {
              phone = phonePoint.value;
            }
          }

          // Format phone number properly
          let cleanPhone = phone.replace(/\D/g, '');
          if (cleanPhone.length === 10) {
            phone = `(${cleanPhone.substring(0, 3)}) ${cleanPhone.substring(3, 6)}-${cleanPhone.substring(6)}`;
          } else if (cleanPhone.length === 11 && cleanPhone.startsWith('1')) {
            phone = `(${cleanPhone.substring(1, 4)}) ${cleanPhone.substring(4, 7)}-${cleanPhone.substring(7)}`;
          }

          // Extract email - try multiple possible fields
          const email = data.data.email || 
                       data.data.emailAddress || 
                       data.data.email_address || 
                       (data.data.emails && data.data.emails[0]) || 
                       '';

          // Extract LinkedIn URL
          let linkedIn = '';
          // First try direct LinkedIn URL fields
          if (data.data.linkedin_url) {
            linkedIn = data.data.linkedin_url;
          } else if (data.data.linkedInUrl) {
            linkedIn = data.data.linkedInUrl;
          } else {
            // Look in websites array
            if (data.data.websites) {
              const linkedInSite = data.data.websites.find((site: any) => 
                (typeof site === 'string' && site.toLowerCase().includes('linkedin.com')) ||
                (site.url && site.url.toLowerCase().includes('linkedin.com'))
              );
              if (linkedInSite) {
                linkedIn = typeof linkedInSite === 'string' ? linkedInSite : linkedInSite.url;
              }
            }
            
            // Look in social_links array
            if (!linkedIn && data.data.social_links) {
              const linkedInProfile = data.data.social_links.find((link: any) => 
                (typeof link === 'string' && link.toLowerCase().includes('linkedin.com')) ||
                (link.url && link.url.toLowerCase().includes('linkedin.com')) ||
                (link.type && link.type.toLowerCase() === 'linkedin')
              );
              if (linkedInProfile) {
                linkedIn = typeof linkedInProfile === 'string' ? linkedInProfile : linkedInProfile.url;
              }
            }
            
            // Look in profiles array
            if (!linkedIn && data.data.profiles) {
              const linkedInProfile = data.data.profiles.find((profile: any) => 
                profile.network?.toLowerCase() === 'linkedin' || 
                profile.url?.toLowerCase().includes('linkedin.com')
              );
              if (linkedInProfile) {
                linkedIn = linkedInProfile.url;
              }
            }
            
            // Look in raw URLs array
            if (!linkedIn && data.data.urls) {
              const linkedInUrl = data.data.urls.find((url: string) => 
                url.toLowerCase().includes('linkedin.com')
              );
              if (linkedInUrl) {
                linkedIn = linkedInUrl;
              }
            }
          }
          
          // Ensure LinkedIn URL starts with https://
          if (linkedIn && !linkedIn.startsWith('http')) {
            linkedIn = 'https://' + linkedIn;
          }

          setFormData(prev => ({
            ...prev,
            firstName,
            lastName,
            email,
            phone,
            address: location?.street_address || location?.streetAddress || location?.street || '',
            city: location?.city || location?.municipality || '',
            state: location?.state || location?.region || location?.stateCode || '',
            postalCode: location?.postal_code || location?.postalCode || location?.zip || '',
            linkedIn,
            dateOfBirth: data.data.date_of_birth || data.data.dateOfBirth || data.data.birthDate || '',
          }));
        }
      } catch (error) {
        console.error('Error fetching resume data:', error);
      }
    };

    fetchResumeData();
  }, []);

  const validateField = (name: keyof ContactInfo, value: string | boolean): boolean => {
    switch (name) {
      case 'email':
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(value as string);
      case 'phone':
        return /^\+?[\d\s-()]{10,}$/.test(value as string);
      case 'postalCode':
        return /^\d{5}(-\d{4})?$/.test(value as string);
      case 'linkedIn':
        return value === '' || /^https?:\/\/(www\.)?linkedin\.com\/.*$/.test(value as string);
      case 'smsOptIn':
        return true;
      default:
        return (value as string).length > 0;
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value, type, checked } = e.target;
    const fieldName = name as keyof ContactInfo;
    
    // Update form data
    if (type === 'checkbox') {
      setFormData(prev => ({ ...prev, [fieldName]: checked }));
      // Validate checkbox fields
      const isValid = validateField(fieldName, checked);
      setValidation(prev => ({ ...prev, [fieldName]: isValid }));
    } else {
      setFormData(prev => ({ ...prev, [fieldName]: value }));
      // Only validate if field has been touched
      if (touched[fieldName]) {
        const isValid = validateField(fieldName, value);
        setValidation(prev => ({ ...prev, [fieldName]: isValid }));
      }
    }
  };

  const handleInputBlur = (e: React.FocusEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    // Mark field as touched when blurred
    setTouched(prev => ({ ...prev, [name]: true }));
    // Validate field
    const isValid = validateField(name as keyof ContactInfo, value);
    setValidation(prev => ({ ...prev, [name]: isValid }));
  };

  const isFormValid = () => {
    let isValid = true;
    Object.entries(formData).forEach(([key, value]) => {
      const fieldValid = validateField(key as keyof ContactInfo, value);
      if (!fieldValid && key !== 'linkedIn') {
        isValid = false;
      }
    });
    // Explicitly check smsOptIn is true
    return isValid && formData.smsOptIn === true;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate all fields
    const newValidation: ValidationState = {} as ValidationState;
    let isValid = true;
    
    Object.entries(formData).forEach(([key, value]) => {
      const fieldValid = validateField(key as keyof ContactInfo, value);
      newValidation[key as keyof ContactInfo] = fieldValid;
      if (!fieldValid && key !== 'linkedIn') isValid = false; // LinkedIn is optional
    });
    
    setValidation(newValidation);

    if (!isValid) {
      alert('Please fill in all required fields correctly');
      return;
    }

    // TODO: Save to database
    console.log('Form submitted:', formData);
    
    // Proceed to resume builder page
    router.push('/profile/resume-builder');
  };

  const DateField = ({ 
    label,
    name,
    required = true
  }: {
    label: string;
    name: keyof ContactInfo;
    required?: boolean;
  }) => {
    const [date, setDate] = useState<Date | null>(
      formData[name] ? new Date(formData[name] as string) : null
    );

    return (
      <div className="relative mb-2">
        <label className="block text-sm font-semibold text-gray-700 mb-0.5">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
        <div className="relative">
          <DatePicker
            selected={date}
            onChange={(date: Date | null) => {
              setDate(date);
              setFormData(prev => ({ ...prev, [name]: date ? date.toISOString().split('T')[0] : '' }));
              // Mark field as touched when changed
              setTouched(prev => ({ ...prev, [name]: true }));
              // Validate field
              const isValid = validateField(name, date ? date.toISOString().split('T')[0] : '');
              setValidation(prev => ({ ...prev, [name]: isValid }));
            }}
            dateFormat="MMMM d, yyyy"
            showMonthDropdown
            showYearDropdown
            dropdownMode="select"
            className="w-full px-3 py-1.5 border border-gray-400 rounded-lg focus:outline-none focus:ring-1 focus:ring-[#0e3a68]/20"
            placeholderText="Select date"
            maxDate={new Date()}
            yearDropdownItemNumber={100}
            scrollableYearDropdown
            calendarClassName="shadow-lg border border-gray-200 rounded-lg p-2"
            autoComplete="off"
            aria-label={label}
            aria-required={required}
            aria-invalid={touched[name] && !validation[name]}
            wrapperClassName="w-full"
          />
        </div>
      </div>
    );
  };

  const InputField = ({ 
    label, 
    name, 
    type = 'text',
    required = true,
    placeholder,
    ...props 
  }: { 
    label: string; 
    name: keyof ContactInfo; 
    type?: string;
    required?: boolean;
    placeholder?: string;
  }) => {
    const inputRef = useRef<HTMLInputElement>(null);

    return (
      <div className="relative mb-2">
        <label className="block text-sm font-semibold text-gray-700 mb-0.5">
          {label}
          {required && <span className="text-red-500 ml-1">*</span>}
        </label>
        <div className="relative">
          <input
            ref={inputRef}
            type={type}
            name={name}
            value={formData[name] as string}
            onChange={(e) => {
              setFormData(prev => ({ ...prev, [name]: e.target.value }));
            }}
            onBlur={handleInputBlur}
            autoComplete="new-password"
            autoCorrect="off"
            autoCapitalize="off"
            spellCheck="false"
            data-form-type="other"
            aria-label={label}
            aria-required={required}
            aria-invalid={touched[name] && !validation[name]}
            className="w-full px-3 py-1.5 border border-gray-400 rounded-lg focus:outline-none focus:ring-1 focus:ring-[#0e3a68]/20"
            placeholder={placeholder}
            {...props}
          />
        </div>
      </div>
    );
  };


  const ContactForm = () => {
    return (
      <div className="min-h-screen bg-[#fefcf9] pb-28">
        {/* Main Content */}
        <div className="w-full max-w-[800px] mx-auto px-2 sm:px-4 py-6">
          <div className="relative transform hover:-translate-y-0.5 transition-transform bg-white rounded-xl border border-black/20 shadow-[0_4px_8px_rgba(0,0,0,0.1)] p-6 mb-8">
            <h1 className="text-3xl font-bold text-gray-900 mb-2 drop-shadow-sm">Contact Information</h1>
            <p className="text-gray-600 mb-6 text-base drop-shadow-sm">Ensure your contact details are up to date — employers may reach out anytime.</p>
          </div>
        
          <form onSubmit={handleSubmit} className="space-y-6 bg-white rounded-xl border border-black/20 shadow-[0_4px_8px_rgba(0,0,0,0.1)] p-6 transform hover:translate-y-[-2px] transition-transform">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <InputField 
                label="First Name" 
                name="firstName" 
                placeholder="John"
              />
              <InputField 
                label="Last Name" 
                name="lastName" 
                placeholder="Doe"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <DateField 
                label="Date of Birth" 
                name="dateOfBirth" 
              />
              <InputField 
                label="Address" 
                name="address" 
                placeholder="123 Main St"
              />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <InputField 
                label="City" 
                name="city" 
                placeholder="San Francisco"
              />
              <InputField 
                label="State" 
                name="state" 
                placeholder="CA"
              />
              <InputField 
                label="Postal Code" 
                name="postalCode" 
                placeholder="94105"
              />
            </div>

            <InputField 
              label="LinkedIn Profile" 
              name="linkedIn" 
              placeholder="https://linkedin.com/in/johndoe"
              required={false}
            />

            <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
              <InputField 
                label="Phone Number" 
                name="phone" 
                type="tel" 
                placeholder="(555) 555-5555"
              />
              <InputField 
                label="Email Address" 
                name="email" 
                type="email" 
                placeholder="john@example.com"
              />
            </div>

            <div className="mt-6 border-t border-gray-200 pt-6">
              <div className="flex items-start">
                <input
                  type="checkbox"
                  name="smsOptIn"
                  id="smsOptIn"
                  checked={formData.smsOptIn}
                  onChange={handleInputChange}
                  className="mt-1 h-5 w-5 rounded border-[1.5px] border-gray-300 accent-[#0e3a68] checked:bg-[#0e3a68] checked:hover:bg-[#0c3156] focus:ring-2 focus:ring-[#0e3a68]/20 hover:border-[#0e3a68] transition-colors cursor-pointer"
                />
                <div className="ml-3 flex-1">
                  <p className="text-sm leading-relaxed text-gray-700">
                    By providing your phone number and selecting the checkbox, you consent to receive new job alerts and account information via SMS text messages. Message frequency may vary based on your interactions with us. Message & data rates may apply. You can opt-out at any time by replying "STOP" to unsubscribe or contacting Customer Service. For more information, please refer to our{' '}
                    <a href="/privacy" className="text-[#0e3a68] underline hover:text-[#0c3156]">Privacy Policy</a>{' '}
                    and{' '}
                    <a href="/terms" className="text-[#0e3a68] underline hover:text-[#0c3156]">Terms of Service</a>.
                  </p>
                </div>
              </div>
            </div>
          </form>
        </div>

        {/* Sticky Navigation */}
        <div className="fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200">
          <div className="mx-auto px-2 sm:px-4 py-4 w-full max-w-[800px]">
            <div className="flex justify-between items-center w-full">
              <button
                onClick={() => router.push('/profile/resume-builder')}
                className="flex items-center w-[100px] rounded-lg border-2 border-[#0e3a68] px-6 py-2.5 text-[#0e3a68] transition-colors hover:bg-[#0e3a68]/5"
              >
                <ArrowLeftIcon className="mr-2 h-5 w-5" />
                Back
              </button>
              <button
                onClick={() => isFormValid() && router.push('/profile/resume-builder')}
                disabled={!isFormValid()}
                className={`flex items-center w-[100px] rounded-lg border-2 px-6 py-2.5 font-medium transition-colors ${isFormValid() ? 'border-[#0e3a68] bg-[#0e3a68] text-white hover:bg-[#0c3156]' : 'border-gray-300 bg-gray-200 text-gray-500 cursor-not-allowed'}`}
              >
                Next
              </button>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return <ContactForm />;

}
