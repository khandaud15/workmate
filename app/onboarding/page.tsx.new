'use client';

import React, { useState, useRef, useEffect } from "react";
import { FaCheck, FaMapMarkerAlt, FaCheckCircle, FaArrowLeft, FaUpload, FaSearch, FaCreditCard, FaTimes, FaFileAlt, FaBriefcase, FaDollarSign, FaChevronRight } from "react-icons/fa";
import { useSession, signOut } from "next-auth/react";
import { useRouter } from "next/navigation";
import Link from "next/link";

// Import the OnboardingCards component
import OnboardingCards from '../components/OnboardingCards';

export default function Onboarding() {
  const { data: session } = useSession();
  const router = useRouter();
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  // State for managing the onboarding flow
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const [showResumeUpload, setShowResumeUpload] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadStatus, setUploadStatus] = useState<'idle' | 'uploading' | 'success'>('idle');
  const [showJobTitles, setShowJobTitles] = useState(false);
  const [showSalary, setShowSalary] = useState(false);
  const [showLocation, setShowLocation] = useState(false);
  const [showAccountSettings, setShowAccountSettings] = useState(false);
  const [salary, setSalary] = useState(50); // Starting at $50k
  const [searchTerm, setSearchTerm] = useState('');
  const [locationSearchTerm, setLocationSearchTerm] = useState('');
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [locationSuggestions, setLocationSuggestions] = useState<string[]>([]);
  const [selectedTitles, setSelectedTitles] = useState<string[]>([]);
  const [selectedLocations, setSelectedLocations] = useState<string[]>([]);
  
  // Sample locations
  const sampleLocations = [
    'New York, NY', 'San Francisco, CA', 'Los Angeles, CA', 'Chicago, IL', 'Austin, TX',
    'Seattle, WA', 'Boston, MA', 'Denver, CO', 'Atlanta, GA', 'Miami, FL',
    'Dallas, TX', 'Houston, TX', 'Portland, OR', 'Phoenix, AZ', 'Philadelphia, PA',
    'Washington, DC', 'San Diego, CA', 'Nashville, TN', 'Las Vegas, NV', 'Minneapolis, MN'
  ];
  
  // Mock job titles
  const mockJobTitles = [
    // Technology
    'Software Engineer', 'Data Scientist', 'Product Manager', 'UX Designer',
    'DevOps Engineer', 'Full Stack Developer', 'Frontend Developer', 'Backend Developer',
    'Machine Learning Engineer', 'AI Specialist', 'Cloud Architect', 'Cybersecurity Analyst',
    'Mobile Developer', 'QA Engineer', 'Database Administrator',
    
    // Business
    'Business Analyst', 'Project Manager', 'Marketing Manager', 'Financial Analyst',
    'Operations Manager', 'Sales Representative', 'Account Manager', 'Strategy Consultant',
    'Management Consultant', 'Investment Banker', 'Venture Capitalist',
    
    // Healthcare
    'Physician', 'Nurse', 'Pharmacist', 'Physical Therapist', 'Dentist',
    'Medical Technologist', 'Healthcare Administrator', 'Veterinarian',
    
    // Creative
    'Graphic Designer', 'Content Writer', 'Video Editor', 'Photographer',
    'Art Director', 'Creative Director', 'Copywriter', 'Animator',
    
    // Education
    'Teacher', 'Professor', 'School Counselor', 'Education Administrator',
    'Curriculum Developer', 'Special Education Teacher', 'Librarian',
    
    // Finance
    'Accountant', 'Financial Planner', 'Investment Analyst', 'Tax Consultant',
    'Auditor', 'Actuary', 'Risk Manager', 'Loan Officer',
    
    // Legal
    'Lawyer', 'Paralegal', 'Legal Consultant', 'Compliance Officer',
    'Contract Manager', 'Patent Attorney', 'Immigration Lawyer',
    
    // Engineering
    'Civil Engineer', 'Mechanical Engineer', 'Electrical Engineer', 'Chemical Engineer',
    'Aerospace Engineer', 'Biomedical Engineer', 'Environmental Engineer',
    
    // Science
    'Research Scientist', 'Biologist', 'Chemist', 'Physicist',
    'Geologist', 'Meteorologist', 'Oceanographer', 'Astronomer',
    
    // Construction & Trades
    'Construction Manager', 'Electrician', 'Plumber', 'Carpenter',
    'HVAC Technician', 'Welder', 'Architect', 'Surveyor',
    
    // Hospitality & Tourism
    'Hotel Manager', 'Chef', 'Restaurant Manager', 'Event Planner',
    'Travel Agent', 'Flight Attendant', 'Tour Guide', 'Concierge',
    
    // Transportation & Logistics
    'Logistics Manager', 'Supply Chain Analyst', 'Truck Driver', 'Pilot',
    'Air Traffic Controller', 'Fleet Manager', 'Warehouse Manager',
    
    // Media & Communications
    'Journalist', 'Public Relations Specialist', 'Social Media Manager', 'Communications Director',
    'Technical Writer', 'Translator', 'Interpreter', 'Broadcaster',
    
    // Real Estate
    'Real Estate Agent', 'Real Estate Broker', 'Property Manager', 'Real Estate Developer',
    'Appraiser', 'Real Estate Analyst',
    
    // Human Resources
    'HR Manager', 'Recruiter', 'Talent Acquisition Specialist', 'HR Business Partner',
    'Compensation Analyst', 'Learning and Development Manager', 'Diversity and Inclusion Manager'
  ];
  
  // Helper functions
  const triggerFileInput = () => {
    fileInputRef.current?.click();
  };
  
  const handleUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setSelectedFile(file);
      setUploadStatus('uploading');
      // Simulate upload process
      setTimeout(() => {
        setUploadStatus('success');
      }, 1500);
    }
  };
  
  const handleSelectTitle = (title: string) => {
    if (selectedTitles.length < 5 && !selectedTitles.includes(title)) {
      setSelectedTitles([...selectedTitles, title]);
      setSearchTerm('');
      setSuggestions([]);
    }
  };
  
  const handleRemoveTitle = (title: string) => {
    setSelectedTitles(selectedTitles.filter(t => t !== title));
  };
  
  const handleSelectLocation = (location: string) => {
    if (selectedLocations.length < 5 && !selectedLocations.includes(location)) {
      setSelectedLocations([...selectedLocations, location]);
      setLocationSearchTerm('');
      setLocationSuggestions([]);
    }
  };
  
  const handleRemoveLocation = (location: string) => {
    setSelectedLocations(selectedLocations.filter(loc => loc !== location));
  };
  
  const handleBackClick = () => {
    if (showLocation) {
      setShowSalary(true);
      setShowLocation(false);
      setShowAccountSettings(false);
    } else if (showSalary) {
      setShowJobTitles(true);
      setShowSalary(false);
    } else if (showJobTitles) {
      setShowResumeUpload(true);
      setShowJobTitles(false);
    } else if (showResumeUpload) {
      setShowResumeUpload(false);
    }
  };
  
  // Update job title suggestions based on search term
  useEffect(() => {
    if (searchTerm.trim()) {
      const filtered = mockJobTitles.filter(title =>
        title.toLowerCase().includes(searchTerm.toLowerCase())
      );
      setSuggestions(filtered.slice(0, 5));
    } else {
      setSuggestions([]);
    }
  }, [searchTerm]);
  
  // Update location suggestions based on search term
  useEffect(() => {
    if (locationSearchTerm.trim()) {
      const filtered = sampleLocations.filter(location =>
        location.toLowerCase().includes(locationSearchTerm.toLowerCase()) &&
        !selectedLocations.includes(location)
      );
      setLocationSuggestions(filtered.slice(0, 5));
    } else {
      setLocationSuggestions([]);
    }
  }, [locationSearchTerm, selectedLocations]);
  
  return (
    <div className="min-h-screen bg-[#0f0f11] text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Onboarding Cards */}
        <OnboardingCards />
        
        {/* Avatar and Account Settings */}
        <div className="flex justify-end mb-8">
          <button
            onClick={() => {
              setShowAccountSettings(!showAccountSettings);
              setShowResumeUpload(false);
              setShowJobTitles(false);
              setShowSalary(false);
              setShowLocation(false);
            }}
            className="w-10 h-10 rounded-full bg-purple-600 flex items-center justify-center hover:bg-purple-700 transition-colors"
          >
            {session?.user?.name?.charAt(0) || "U"}
          </button>
        </div>

        {/* Account Settings Panel */}
        {showAccountSettings && (
          <div className="max-w-md mx-auto bg-[#1a1625] rounded-lg p-6 mb-8 border border-gray-800">
            <h2 className="text-xl font-bold mb-4">Account Settings</h2>
            <div className="mb-4">
              <p className="text-gray-400 mb-1">Email</p>
              <p>{session?.user?.email || "Not signed in"}</p>
            </div>
            <div className="mb-4">
              <p className="text-gray-400 mb-1">Name</p>
              <p>{session?.user?.name || "Not provided"}</p>
            </div>
            <div className="flex justify-end">
              <button
                onClick={() => signOut({ callbackUrl: '/' })}
                className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Sign Out
              </button>
            </div>
          </div>
        )}
        
        {/* Resume Upload Section */}
        {showResumeUpload && (
          <div className="max-w-2xl mx-auto p-4 lg:p-8 mt-8">
            {/* Main Content */}
            <div className="mx-auto max-w-3xl">
              {/* Headers */}
              <div className="mb-8 text-center">
                <h1 className="text-2xl font-bold text-white mb-2">
                  Upload your resume
                </h1>
                <p className="text-base text-gray-400">
                  Help us understand your experience and skills to find the best jobs for you.
                </p>
              </div>
              
              {/* File Upload Area */}
              <div className="mb-8">
                <div className="bg-[#1a1625] border-2 border-dashed border-gray-700 rounded-lg p-8 text-center">
                  {uploadStatus === 'idle' && (
                    <>
                      <div className="mb-4">
                        <FaUpload className="mx-auto h-12 w-12 text-gray-500" />
                      </div>
                      <p className="mb-4 text-gray-300">
                        Drag and drop your resume here, or click to browse
                      </p>
                      <button
                        onClick={triggerFileInput}
                        className="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
                      >
                        Browse Files
                      </button>
                      <input
                        ref={fileInputRef}
                        type="file"
                        accept=".pdf,.doc,.docx"
                        onChange={handleUpload}
                        className="hidden"
                      />
                    </>
                  )}
                  
                  {uploadStatus === 'uploading' && (
                    <div className="py-4">
                      <div className="mb-4">
                        <div className="h-2 bg-gray-700 rounded-full overflow-hidden">
                          <div className="h-full bg-purple-600 rounded-full w-1/2 animate-pulse"></div>
                        </div>
                      </div>
                      <p className="text-gray-300">Uploading {selectedFile?.name}...</p>
                    </div>
                  )}
                  
                  {uploadStatus === 'success' && (
                    <>
                      <div className="mb-4">
                        <div className="mx-auto h-12 w-12 rounded-full bg-green-600 flex items-center justify-center">
                          <FaCheck className="h-6 w-6 text-white" />
                        </div>
                      </div>
                      <p className="mb-2 text-gray-300">
                        Resume uploaded successfully!
                      </p>
                      <p className="mb-4 text-gray-500 text-sm">
                        {selectedFile?.name}
                      </p>
                      <button
                        onClick={() => {
                          setUploadStatus('idle');
                          setSelectedFile(null);
                        }}
                        className="px-4 py-2 border border-gray-600 text-white rounded-lg hover:bg-gray-800 transition-colors"
                      >
                        Upload a different file
                      </button>
                    </>
                  )}
                </div>
              </div>
              
              {/* Navigation Buttons */}
              <div className="mt-8">
                <div className="flex justify-between items-center w-full">
                  <button
                    onClick={handleBackClick}
                    className="w-24 px-3 py-2 text-sm border border-gray-600 rounded-lg text-white hover:bg-gray-800 transition-colors flex items-center justify-center"
                  >
                    <FaArrowLeft className="mr-1 h-4 w-4" />
                    Back
                  </button>
                  <button
                    onClick={() => {
                      setShowResumeUpload(false);
                      setShowJobTitles(true);
                    }}
                    className="w-24 px-3 py-2 text-sm rounded-lg bg-purple-600 hover:bg-purple-700 text-white transition-colors"
                  >
                    Next
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Job Titles Section */}
        {showJobTitles && (
          <div className="max-w-2xl mx-auto p-4 lg:p-8 mt-8">
            {/* Main Content */}
            <div className="mx-auto max-w-3xl">
              {/* Headers */}
              <div className="mb-8 text-center">
                <h1 className="text-2xl font-bold text-white mb-2">
                  What job titles are you looking for?
                </h1>
                <p className="text-base text-gray-400">
                  Add up to 5 job titles to help us find the right opportunities for you.
                </p>
              </div>
              
              {/* Selected Job Titles */}
              <div className="mb-6">
                <div className="flex flex-wrap gap-2 mb-4">
                  {selectedTitles.map((title) => (
                    <div
                      key={title}
                      className="flex items-center bg-purple-900/30 border border-purple-500 text-purple-100 px-3 py-1.5 rounded-full text-sm"
                    >
                      {title}
                      <button
                        onClick={() => handleRemoveTitle(title)}
                        className="ml-2 text-purple-300 hover:text-white"
                      >
                        <FaTimes size={12} />
                      </button>
                    </div>
                  ))}
                </div>
                
                {/* Search Input */}
                <div className="relative">
                  <div className="relative flex items-center">
                    <FaSearch className="absolute left-4 text-gray-500" size={16} />
                    <input
                      type="text"
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      placeholder="Search for job titles..."
                      className="w-full bg-[#1a1625] border border-gray-700 rounded-lg pl-10 pr-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                  {suggestions.length > 0 && (
                    <div className="absolute z-10 w-full mt-1 bg-[#1a1625] border border-gray-700 rounded-lg shadow-lg max-h-60 overflow-auto">
                      {suggestions.map((title) => (
                        <div
                          key={title}
                          onClick={() => handleSelectTitle(title)}
                          className="px-4 py-2 text-white hover:bg-purple-900/50 cursor-pointer"
                        >
                          {title}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
              
              {/* Navigation Buttons */}
              <div className="mt-8">
                <div className="flex justify-between items-center w-full">
                  <button
                    onClick={handleBackClick}
                    className="w-24 px-3 py-2 text-sm border border-gray-600 rounded-lg text-white hover:bg-gray-800 transition-colors flex items-center justify-center"
                  >
                    <FaArrowLeft className="mr-1 h-4 w-4" />
                    Back
                  </button>
                  <button
                    onClick={() => {
                      setShowJobTitles(false);
                      setShowSalary(true);
                    }}
                    className="w-24 px-3 py-2 text-sm rounded-lg bg-purple-600 hover:bg-purple-700 text-white transition-colors"
                  >
                    Next
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Salary Section */}
        {showSalary && (
          <div className="max-w-2xl mx-auto p-4 lg:p-8 mt-8">
            {/* Main Content */}
            <div className="mx-auto max-w-3xl">
              {/* Headers */}
              <div className="mb-8 text-center">
                <h1 className="text-2xl font-bold text-white mb-2">
                  What's your desired salary?
                </h1>
                <p className="text-base text-gray-400">
                  We'll find jobs that match your salary expectations.
                </p>
              </div>
              
              {/* Salary Slider */}
              <div className="mb-6">
                <div className="bg-[#1a1625] border border-gray-700 rounded-lg p-6">
                  <div className="mb-4 text-center">
                    <span className="text-3xl font-bold text-white">${salary}k</span>
                    <span className="text-gray-400 ml-1">per year</span>
                  </div>
                  
                  <div className="mt-8">
                    <div className="flex justify-between text-gray-400 text-sm mb-2">
                      <span>$30k</span>
                      <span>$500k+</span>
                    </div>
                    <div className="relative">
                      <input
                        type="range"
                        id="salary-range"
                        min="30"
                        max="500"
                        value={salary}
                        onChange={(e) => setSalary(Number(e.target.value))}
                        className="w-full"
                        style={{
                          '--progress': `${((salary - 30) / (500 - 30)) * 100}%`
                        } as React.CSSProperties}
                      />
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Navigation Buttons */}
              <div className="mt-8">
                <div className="flex justify-between items-center w-full">
                  <button
                    onClick={handleBackClick}
                    className="w-24 px-3 py-2 text-sm border border-gray-600 rounded-lg text-white hover:bg-gray-800 transition-colors flex items-center justify-center"
                  >
                    <FaArrowLeft className="mr-1 h-4 w-4" />
                    Back
                  </button>
                  <button
                    onClick={() => {
                      setShowSalary(false);
                      setShowLocation(true);
                      setShowAccountSettings(false);
                    }}
                    className="w-24 px-3 py-2 text-sm rounded-lg bg-purple-600 hover:bg-purple-700 text-white transition-colors"
                  >
                    Next
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Location Section */}
        {showLocation && (
          <div className="max-w-2xl mx-auto p-4 lg:p-8 mt-8">
            {/* Main Content */}
            <div className="mx-auto max-w-3xl">
              {/* Headers */}
              <div className="mb-8 text-center">
                <h1 className="text-2xl font-bold text-white mb-2">
                  Where do you want to work?
                </h1>
                <p className="text-base text-gray-400">
                  Add multiple locations to cast a wider net.
                </p>
              </div>
              
              {/* Location Selection */}
              <div className="mb-6">
                <div className="flex flex-wrap gap-2 mb-4">
                  {selectedLocations.map((location) => (
                    <div
                      key={location}
                      className="flex items-center bg-purple-900/30 border border-purple-500 text-purple-100 px-3 py-1.5 rounded-full text-sm"
                    >
                      {location}
                      <button
                        onClick={() => handleRemoveLocation(location)}
                        className="ml-2 text-purple-300 hover:text-white"
                      >
                        <FaTimes size={12} />
                      </button>
                    </div>
                  ))}
                </div>
                
                {/* Search Input */}
                <div className="relative">
                  <div className="relative flex items-center">
                    <FaSearch className="absolute left-4 text-gray-500" size={16} />
                    <input
                      type="text"
                      value={locationSearchTerm}
                      onChange={(e) => setLocationSearchTerm(e.target.value)}
                      placeholder="Search for a city or state..."
                      className="w-full bg-[#1a1625] border border-gray-700 rounded-lg pl-10 pr-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                    />
                  </div>
                  {locationSuggestions.length > 0 && (
                    <div className="absolute z-10 w-full mt-1 bg-[#1a1625] border border-gray-700 rounded-lg shadow-lg max-h-60 overflow-auto">
                      {locationSuggestions.map((location) => (
                        <div
                          key={location}
                          onClick={() => handleSelectLocation(location)}
                          className="px-4 py-2 text-white hover:bg-purple-900/50 cursor-pointer"
                        >
                          {location}
                        </div>
                      ))}
                    </div>
                  )}
                </div>
              </div>
              
              {/* Navigation Buttons */}
              <div className="mt-8">
                <div className="flex justify-between items-center w-full">
                  <button
                    onClick={handleBackClick}
                    className="w-24 px-3 py-2 text-sm border border-gray-600 rounded-lg text-white hover:bg-gray-800 transition-colors flex items-center justify-center"
                  >
                    <FaArrowLeft className="mr-1 h-4 w-4" />
                    Back
                  </button>
                  <button
                    onClick={() => {
                      // Complete onboarding
                      router.push("/dashboard");
                    }}
                    className="w-24 px-3 py-2 text-sm rounded-lg bg-purple-600 hover:bg-purple-700 text-white transition-colors"
                  >
                    Finish
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
      
      <style jsx>{`
        input[type="range"] {
          -webkit-appearance: none;
          height: 8px;
          background: #2d2a3a;
          border-radius: 4px;
          outline: none;
        }
        
        input[type="range"]::-webkit-slider-thumb {
          -webkit-appearance: none;
          width: 20px;
          height: 20px;
          background: white;
          border-radius: 50%;
          cursor: pointer;
          border: 2px solid #8b5cf6;
        }
        
        input[type="range"]::-moz-range-thumb {
          width: 20px;
          height: 20px;
          background: white;
          border-radius: 50%;
          cursor: pointer;
          border: 2px solid #8b5cf6;
        }
        
        input[type="range"]::before {
          content: '';
          position: absolute;
          left: 0;
          top: 50%;
          transform: translateY(-50%);
          background: #8b5cf6;
          border-radius: 4px;
          height: 8px;
          width: var(--progress, 0%);
        }
      `}</style>
    </div>
  );
}
